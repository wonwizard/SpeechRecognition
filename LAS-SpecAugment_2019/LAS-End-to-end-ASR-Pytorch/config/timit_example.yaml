asr_model:
  optimizer: 
    type: 'Adam'                              # Optimizer used for training (adam)
    learning_rate: 0.0001                     # Learning rate for opt
    joint_ctc: 0.0                            # Weight for joint CTC training (0:disabled CTC, 1:only CTC) 

  encoder:                                    ########## Encoder
    enc_type: 'BiRNN'                         # Encoder type (RNN: Normal RNN encoder /BiRNN: Bidirection)
    sample_rate: '2_2_1'                      # Sample rate between layers (reduce time dimension)
    sample_style: 'concat'                    # Sample by drop (dropping frame) or concat (concatenating them)
    dim: '256_256_256'                        # Dimension of each hidden layer
    dropout: '0_0_0'                          # Dropout between each hidden layer
    rnn_cell: 'LSTM'                          # RNN cell used in encoder, should be implemented in Pytorch
  attention:                                  ########## Attention : http://www.aclweb.org/anthology/D15-1166 section 3.1 for more details
    att_mode: 'dot'                           # Attention mode (dot)
    dim: 256                                  # The dimension of attention layer, only works when proj==True
    proj: True                                # Use a single layer to project encoded feature
    num_head: 1                               # Number of heads for multi-head attention (UNTESTED)
  decoder:
    dim: 256
    layer: 1
    dropout: 0
    rnn_cell: 'LSTMCell'

clm:
  enable: False                               # Enable adversarial training between ASR and CLM


solver:
  # Data options
  dataset: 'timit'                      # 
  data_path: 'data/timit_mfcc39_phoneme63'    # Source data path
  n_jobs: 8                                   # Subprocess used for torch Dataloader
  max_timestep: 0                             # Max length for audio feature (0 for no restriction)
  max_label_len: 0                            # Max length for output sequence (0 for no restriction)
  # Training options
  train_set: ['train']                        #
  batch_size: 8                               # training batch size
  apex: True                                  # Use APEX (see https://github.com/NVIDIA/apex for more details)
  total_steps: 200000                         # total steps for training                         
  tf_start: 0.9                               # teacher forcing rate during training will be linearly
  tf_end: 0.7                                 # decaying from upperbound to lower bound for each epoch
  # Validation options
  dev_set: ['test']                      
  dev_batch_size: 16                             
  dev_step: 2000
  # Decoding options
  test_set: ['test']
  max_decode_step_ratio: 0.25
  decode_beam_size: 20
  decode_ctc_weight: 0.0
  decode_lm_path: ''
  decode_lm_weight: 0.0
